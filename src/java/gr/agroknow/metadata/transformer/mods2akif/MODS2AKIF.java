/* The following code was generated by JFlex 1.4.1 on 3/4/13 4:12 PM */

package gr.agroknow.metadata.transformer.mods2akif;



import java.text.SimpleDateFormat;

import java.util.Calendar;

import java.util.List;

import java.util.ArrayList;

import java.util.HashSet;

import java.util.Set;



import org.json.simple.JSONArray;

import org.json.simple.JSONObject;

import org.json.simple.JSONValue;



import net.zettadata.generator.tools.NSDLAgeRange;

import net.zettadata.generator.tools.NSDLlreLRT;

import net.zettadata.generator.tools.Toolbox;

import net.zettadata.generator.tools.ToolboxException;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/4/13 4:12 PM from the specification file
 * <tt>/Users/dmssrt/home/projects/agroKnow/code/nsdl2akif/src/conf/nsdl2akif.jflex</tt>
 */
class NSDL2AKIF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NSDL = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\31\25\0\1\20\1\0\1\25\14\0\1\11\3\0\1\54"+
    "\6\0\1\10\1\0\1\1\1\24\1\12\2\0\1\45\1\0\1\55"+
    "\1\41\1\42\1\56\1\0\1\57\1\30\2\0\1\35\1\50\1\37"+
    "\3\0\1\27\1\40\1\46\1\26\1\0\1\53\7\0\1\6\1\0"+
    "\1\34\1\51\1\7\1\4\1\14\1\16\1\43\1\44\1\13\1\52"+
    "\1\0\1\5\1\47\1\2\1\32\1\23\1\0\1\17\1\3\1\15"+
    "\1\33\1\36\1\0\1\21\1\22\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\3\1\260\0\1\2\54\0\1\3\24\0\1\4"+
    "\31\0\1\5\53\0\1\6\2\0\1\7\23\0\1\10"+
    "\65\0\1\11\43\0\1\12\33\0\1\13\43\0\1\14"+
    "\3\0\1\15\43\0\1\16\13\0\1\17\4\0\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750"+
    "\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0"+
    "\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0"+
    "\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0"+
    "\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0"+
    "\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950"+
    "\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0"+
    "\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50"+
    "\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0"+
    "\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50"+
    "\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0"+
    "\0\u2100\0\u2130\0\u2160\0\u2190\0\u21c0\0\140\0\u21f0\0\u2220"+
    "\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0"+
    "\0\u23d0\0\u2400\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520"+
    "\0\u2550\0\u2580\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0"+
    "\0\u26d0\0\u2700\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820"+
    "\0\u2850\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0"+
    "\0\u29d0\0\u2a00\0\140\0\u2a30\0\u2a60\0\u2a90\0\u2ac0\0\u2af0"+
    "\0\u2b20\0\u2b50\0\u2b80\0\u2bb0\0\u2be0\0\u2c10\0\u2c40\0\u2c70"+
    "\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30\0\u2d60\0\u2d90\0\u2dc0\0\u1140"+
    "\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\u2eb0\0\u2ee0\0\u2f10\0\u2f40"+
    "\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060\0\u3090\0\u30c0"+
    "\0\u30f0\0\u3120\0\u3150\0\u3180\0\u31b0\0\u31e0\0\u3210\0\u3240"+
    "\0\u3270\0\u1410\0\u32a0\0\u32d0\0\u3300\0\u3330\0\u3360\0\u3390"+
    "\0\u33c0\0\u33f0\0\u3420\0\u3450\0\u3480\0\u34b0\0\u34e0\0\u3510"+
    "\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600\0\u3630\0\u3660\0\u3690"+
    "\0\u36c0\0\u36f0\0\u3720\0\u3750\0\u3780\0\u37b0\0\u37e0\0\u3810"+
    "\0\u3840\0\u3870\0\u38a0\0\u38d0\0\u3900\0\u3930\0\u3960\0\u3990"+
    "\0\u39c0\0\u39f0\0\u3a20\0\u3a50\0\u3a80\0\u1920\0\u3ab0\0\u3ae0"+
    "\0\u19b0\0\u3b10\0\u3b40\0\u3b70\0\u3ba0\0\u3bd0\0\u3c00\0\u3c30"+
    "\0\u3c60\0\u3c90\0\u3cc0\0\u3cf0\0\u3d20\0\u3d50\0\u3d80\0\u3db0"+
    "\0\u3de0\0\u3e10\0\u3e40\0\u3e70\0\u1c80\0\u3ea0\0\u3ed0\0\u3f00"+
    "\0\u3f30\0\u3f60\0\u3f90\0\u3fc0\0\u3ff0\0\u4020\0\u4050\0\u4080"+
    "\0\u40b0\0\u40e0\0\u4110\0\u4140\0\u4170\0\u41a0\0\u41d0\0\u4200"+
    "\0\u4230\0\u4260\0\u4290\0\u42c0\0\u42f0\0\u4320\0\u4350\0\u4380"+
    "\0\u43b0\0\u43e0\0\u4410\0\u4440\0\u4470\0\u44a0\0\u44d0\0\u4500"+
    "\0\u4530\0\u4560\0\u4590\0\u45c0\0\u45f0\0\u4620\0\u4650\0\u4680"+
    "\0\u46b0\0\u46e0\0\u4710\0\u4740\0\u4770\0\u47a0\0\u47d0\0\u4800"+
    "\0\u4830\0\u4860\0\u24f0\0\u4890\0\u48c0\0\u48f0\0\u4920\0\u4950"+
    "\0\u4980\0\u49b0\0\u49e0\0\u4a10\0\u4a40\0\u4a70\0\u4aa0\0\u4ad0"+
    "\0\u4b00\0\u4b30\0\u4b60\0\u4b90\0\u4bc0\0\u4bf0\0\u4c20\0\u4c50"+
    "\0\u4c80\0\u4cb0\0\u4ce0\0\u4d10\0\u4d40\0\u4d70\0\u4da0\0\u4dd0"+
    "\0\u4e00\0\u4e30\0\u4e60\0\u4e90\0\u4ec0\0\u4ef0\0\u2c40\0\u4f20"+
    "\0\u4f50\0\u4f80\0\u4fb0\0\u4fe0\0\u5010\0\u5040\0\u5070\0\u50a0"+
    "\0\u50d0\0\u5100\0\u5130\0\u5160\0\u5190\0\u51c0\0\u51f0\0\u5220"+
    "\0\u5250\0\u5280\0\u52b0\0\u52e0\0\u5310\0\u5340\0\u5370\0\u53a0"+
    "\0\u53d0\0\u5400\0\u4410\0\u5430\0\u5460\0\u5490\0\u54c0\0\u54f0"+
    "\0\u5520\0\u5550\0\u5580\0\u55b0\0\u55e0\0\u5610\0\u5640\0\u5670"+
    "\0\u56a0\0\u56d0\0\u5700\0\u5730\0\u5760\0\u5790\0\u57c0\0\u57f0"+
    "\0\u5820\0\u5850\0\u5880\0\u58b0\0\u58e0\0\u5910\0\u5940\0\u5970"+
    "\0\u59a0\0\u59d0\0\u5a00\0\u5a30\0\u5a60\0\u5a90\0\u4c20\0\u5ac0"+
    "\0\u5af0\0\u5b20\0\u4a10\0\u5b50\0\u5b80\0\u5bb0\0\u5be0\0\u5c10"+
    "\0\u5c40\0\u5c70\0\u5ca0\0\u5cd0\0\u5d00\0\u5d30\0\u5d60\0\u5d90"+
    "\0\u5dc0\0\u5df0\0\u5e20\0\u5e50\0\u5e80\0\u5eb0\0\u5ee0\0\u5f10"+
    "\0\u5f40\0\u5f70\0\u5fa0\0\u5fd0\0\u6000\0\u6030\0\u6060\0\u6090"+
    "\0\u60c0\0\u60f0\0\u6120\0\u6150\0\u6180\0\u61b0\0\u5880\0\u61e0"+
    "\0\u6210\0\u6240\0\u6270\0\u62a0\0\u62d0\0\u6300\0\u6330\0\u6360"+
    "\0\u6390\0\u63c0\0\u5a30\0\u63f0\0\u6420\0\u6450\0\u6480\0\u5be0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\57\3\1\5\56\3\62\0\1\6\61\0"+
    "\1\7\4\0\1\10\51\0\1\11\63\0\1\12\52\0"+
    "\1\13\61\0\1\14\63\0\1\15\4\0\1\16\45\0"+
    "\1\17\61\0\1\20\55\0\1\21\1\22\1\23\1\0"+
    "\1\24\3\0\1\25\1\0\1\26\1\27\51\0\1\30"+
    "\53\0\1\31\61\0\1\32\104\0\1\33\40\0\1\34"+
    "\77\0\1\35\42\0\1\36\44\0\1\37\66\0\1\40"+
    "\6\0\1\41\67\0\1\42\34\0\1\43\4\0\1\44"+
    "\2\0\1\45\14\0\1\46\30\0\1\47\56\0\1\50"+
    "\124\0\1\51\11\0\1\52\56\0\1\53\71\0\1\54"+
    "\57\0\1\55\60\0\1\56\65\0\1\57\53\0\1\60"+
    "\57\0\1\61\44\0\1\62\66\0\1\63\53\0\1\64"+
    "\23\0\1\65\32\0\1\66\60\0\1\67\122\0\1\70"+
    "\14\0\1\71\113\0\1\72\50\0\1\73\25\0\1\74"+
    "\62\0\1\75\66\0\1\76\112\0\1\77\24\0\1\100"+
    "\76\0\1\101\67\0\1\102\23\0\1\103\54\0\1\104"+
    "\57\0\1\105\63\0\1\106\63\0\1\107\62\0\1\110"+
    "\73\0\1\111\41\0\1\112\57\0\1\113\56\0\1\114"+
    "\55\0\1\115\5\0\1\116\73\0\1\117\57\0\1\120"+
    "\32\0\1\121\114\0\1\122\27\0\1\123\56\0\1\124"+
    "\53\0\1\125\52\0\1\126\64\0\1\127\63\0\1\130"+
    "\100\0\1\131\55\0\1\132\40\0\1\133\56\0\1\134"+
    "\45\0\31\135\1\0\26\135\21\0\1\136\53\0\1\137"+
    "\57\0\1\140\76\0\1\141\40\0\1\142\45\0\1\143"+
    "\70\0\1\144\53\0\1\145\52\0\1\146\71\0\1\147"+
    "\65\0\1\150\77\0\1\151\33\0\1\152\56\0\1\153"+
    "\41\0\31\154\1\0\26\154\1\135\1\155\27\135\1\0"+
    "\26\135\3\0\1\156\74\0\1\157\53\0\1\160\60\0"+
    "\1\161\45\0\1\162\57\0\1\163\56\0\1\164\57\0"+
    "\1\165\61\0\1\166\65\0\1\167\62\0\1\170\56\0"+
    "\1\171\55\0\1\172\60\0\1\173\44\0\1\154\1\174"+
    "\27\154\1\0\26\154\1\135\1\155\7\135\1\175\17\135"+
    "\1\0\26\135\13\0\1\176\65\0\1\177\42\0\1\200"+
    "\66\0\1\201\123\0\1\202\27\0\1\203\37\0\1\204"+
    "\53\0\1\205\61\0\1\206\52\0\31\207\1\0\26\207"+
    "\13\0\1\210\56\0\1\211\45\0\31\212\1\0\26\212"+
    "\14\0\1\213\43\0\1\154\1\174\7\154\1\214\17\154"+
    "\1\0\26\154\1\135\1\155\2\135\1\215\24\135\1\0"+
    "\26\135\10\0\1\216\52\0\1\217\74\0\1\220\71\0"+
    "\1\221\57\0\1\222\40\0\1\223\60\0\1\224\47\0"+
    "\1\225\61\0\1\226\51\0\1\207\1\227\27\207\1\0"+
    "\26\207\32\0\1\230\25\0\31\231\1\0\26\231\1\212"+
    "\1\232\27\212\1\0\26\212\17\0\1\233\40\0\1\154"+
    "\1\174\2\154\1\234\24\154\1\0\26\154\1\135\1\155"+
    "\5\135\1\235\21\135\1\0\26\135\15\0\1\236\55\0"+
    "\1\237\65\0\1\240\40\0\1\241\62\0\1\242\115\0"+
    "\1\243\34\0\1\244\44\0\1\245\56\0\1\246\53\0"+
    "\1\207\1\227\7\207\1\247\17\207\1\0\26\207\2\0"+
    "\1\250\55\0\1\231\1\251\27\231\1\0\26\231\1\212"+
    "\1\232\7\212\1\252\17\212\1\0\26\212\20\0\1\253"+
    "\37\0\1\154\1\174\5\154\1\254\21\154\1\0\26\154"+
    "\1\135\1\155\6\135\1\255\20\135\1\0\26\135\22\0"+
    "\1\256\45\0\1\257\52\0\1\260\111\0\1\261\26\0"+
    "\1\262\117\0\1\263\34\0\1\264\44\0\1\265\60\0"+
    "\1\266\50\0\1\207\1\227\2\207\1\267\24\207\1\0"+
    "\26\207\12\0\1\270\45\0\1\231\1\251\7\231\1\271"+
    "\17\231\1\0\26\231\1\212\1\232\2\212\1\272\24\212"+
    "\1\0\26\212\21\0\1\273\36\0\1\154\1\174\6\154"+
    "\1\274\20\154\1\0\26\154\1\135\1\155\13\135\1\275"+
    "\13\135\1\0\26\135\23\0\1\276\51\0\1\277\55\0"+
    "\1\300\60\0\1\301\57\0\1\302\60\0\1\303\45\0"+
    "\1\304\60\0\1\305\53\0\1\207\1\227\5\207\1\306"+
    "\21\207\1\0\26\207\31\307\1\0\26\307\1\231\1\251"+
    "\2\231\1\310\24\231\1\0\26\231\1\212\1\232\5\212"+
    "\1\311\21\212\1\0\26\212\3\0\1\312\54\0\1\154"+
    "\1\174\13\154\1\313\13\154\1\0\26\154\1\135\1\155"+
    "\20\135\1\314\6\135\1\0\26\135\14\0\1\315\65\0"+
    "\1\316\45\0\1\317\105\0\1\320\40\0\1\321\43\0"+
    "\1\322\67\0\1\323\53\0\1\324\50\0\1\207\1\227"+
    "\6\207\1\325\20\207\1\0\26\207\1\307\1\326\27\307"+
    "\1\0\26\307\1\231\1\251\5\231\1\327\21\231\1\0"+
    "\26\231\1\212\1\232\6\212\1\330\20\212\1\0\26\212"+
    "\13\0\1\331\44\0\1\154\1\174\11\154\1\332\15\154"+
    "\1\0\26\154\1\135\1\155\21\135\1\333\5\135\1\0"+
    "\26\135\24\0\1\334\56\0\1\335\51\0\1\336\56\0"+
    "\1\337\55\0\1\340\65\0\1\341\47\0\1\342\61\0"+
    "\1\343\45\0\1\207\1\227\1\207\1\344\25\207\1\0"+
    "\26\207\1\307\1\326\7\307\1\345\17\307\1\0\26\307"+
    "\1\231\1\251\6\231\1\346\20\231\1\0\26\231\1\212"+
    "\1\232\5\212\1\347\21\212\1\0\26\212\10\0\1\350"+
    "\47\0\1\154\1\174\13\154\1\351\13\154\1\0\26\154"+
    "\1\135\1\155\12\135\1\352\14\135\1\0\26\135\25\0"+
    "\1\353\46\0\1\354\65\0\1\355\42\0\1\356\52\0"+
    "\31\357\1\0\26\357\21\0\1\360\53\0\1\361\42\0"+
    "\1\207\1\227\27\207\1\0\1\207\1\362\24\207\1\307"+
    "\1\326\2\307\1\363\24\307\1\0\26\307\1\231\1\251"+
    "\3\231\1\364\23\231\1\0\26\231\1\212\1\232\15\212"+
    "\1\365\11\212\1\0\26\212\15\0\1\366\42\0\1\154"+
    "\1\174\3\154\1\367\23\154\1\0\26\154\1\135\1\155"+
    "\10\135\1\370\16\135\1\0\26\135\2\0\1\371\101\0"+
    "\1\372\56\0\1\373\54\0\1\374\37\0\1\357\1\375"+
    "\27\357\1\0\26\357\3\0\1\376\76\0\1\377\35\0"+
    "\1\207\1\227\27\207\1\0\17\207\1\u0100\6\207\1\307"+
    "\1\326\5\307\1\u0101\21\307\1\0\26\307\1\231\1\251"+
    "\27\231\1\0\2\231\1\u0102\23\231\1\212\1\232\12\212"+
    "\1\u0103\14\212\1\0\26\212\22\0\1\u0104\35\0\1\154"+
    "\1\174\12\154\1\u0105\14\154\1\0\26\154\3\0\1\u0106"+
    "\101\0\1\u0107\46\0\1\u0108\64\0\1\u0109\36\0\1\357"+
    "\1\375\7\357\1\u010a\17\357\1\0\26\357\13\0\1\u010b"+
    "\67\0\1\u010c\34\0\1\207\1\227\27\207\1\0\20\207"+
    "\1\u010d\5\207\1\307\1\326\6\307\1\u010e\20\307\1\0"+
    "\26\307\1\231\1\251\1\u010f\26\231\1\0\26\231\1\212"+
    "\1\232\27\212\1\0\2\212\1\u0110\23\212\23\0\1\u0111"+
    "\34\0\1\154\1\174\10\154\1\u0112\16\154\1\0\26\154"+
    "\4\0\1\u0113\57\0\1\u0114\77\0\1\u0115\36\0\1\u0116"+
    "\54\0\1\357\1\375\2\357\1\u0117\24\357\1\0\26\357"+
    "\10\0\1\u0118\63\0\1\u0119\43\0\1\207\1\227\12\207"+
    "\1\u011a\14\207\1\0\26\207\1\307\1\326\2\307\1\u011b"+
    "\24\307\1\0\26\307\1\231\1\251\27\231\1\0\11\231"+
    "\1\u011c\14\231\1\212\1\232\13\212\1\u011d\13\212\1\0"+
    "\26\212\14\0\1\u011e\50\0\1\u011f\61\0\1\u0120\75\0"+
    "\1\u0121\45\0\1\u0122\44\0\1\357\1\375\5\357\1\u0123"+
    "\21\357\1\0\26\357\15\0\1\u0124\66\0\1\u0125\33\0"+
    "\1\207\1\227\5\207\1\u0126\21\207\1\0\26\207\1\307"+
    "\1\326\12\307\1\u0127\14\307\1\0\26\307\1\231\1\251"+
    "\27\231\1\0\1\231\1\u0128\24\231\1\212\1\232\27\212"+
    "\1\0\1\u0129\25\212\24\0\1\u012a\41\0\1\u012b\66\0"+
    "\1\u012c\46\0\1\u012d\63\0\1\u012e\47\0\1\357\1\375"+
    "\13\357\1\u012f\13\357\1\0\26\357\22\0\1\u0130\62\0"+
    "\1\u0131\32\0\1\207\1\227\13\207\1\u0132\13\207\1\0"+
    "\26\207\1\307\1\326\1\307\1\u0133\25\307\1\0\26\307"+
    "\1\231\1\251\27\231\1\0\2\231\1\u0134\23\231\1\212"+
    "\1\232\15\212\1\u0135\11\212\1\0\26\212\25\0\1\u0136"+
    "\36\0\1\u0137\63\0\1\u0138\56\0\1\u0139\65\0\1\u013a"+
    "\42\0\1\357\1\375\6\357\1\u013b\20\357\1\0\26\357"+
    "\23\0\1\u013c\36\0\1\u013d\55\0\1\207\1\227\10\207"+
    "\1\u013e\16\207\1\0\26\207\1\307\1\326\5\307\1\u013f"+
    "\21\307\1\0\26\307\1\231\1\251\27\231\1\0\11\231"+
    "\1\u0140\14\231\1\212\1\232\10\212\1\u0141\16\212\1\0"+
    "\26\212\4\0\1\u0142\62\0\1\u0143\100\0\1\u0144\44\0"+
    "\1\u0145\64\0\1\u0146\35\0\1\357\1\375\15\357\1\u0147"+
    "\11\357\1\0\26\357\14\0\1\u0148\46\0\1\u0149\54\0"+
    "\1\307\1\326\15\307\1\u014a\11\307\1\0\26\307\1\231"+
    "\1\251\12\231\1\u014b\14\231\1\0\26\231\7\0\1\u014c"+
    "\60\0\1\u014d\117\0\1\u014e\17\0\1\u014f\72\0\1\u0150"+
    "\34\0\1\357\1\375\11\357\1\u0151\15\357\1\0\26\357"+
    "\24\0\1\u0152\37\0\1\u0153\53\0\1\307\1\326\11\307"+
    "\1\u0154\15\307\1\0\26\307\1\231\1\251\10\231\1\u0155"+
    "\16\231\1\0\26\231\15\0\1\u0156\101\0\1\u0157\66\0"+
    "\1\u0158\64\0\1\u0159\20\0\1\u015a\43\0\1\357\1\375"+
    "\27\357\1\0\11\357\1\u015b\14\357\25\0\1\u015c\37\0"+
    "\1\u015d\52\0\1\307\1\326\21\307\1\u015e\5\307\1\0"+
    "\26\307\10\0\1\u015f\107\0\1\u0160\44\0\1\u0161\106\0"+
    "\1\u0162\27\0\1\u0163\33\0\1\357\1\375\27\357\1\0"+
    "\12\357\1\u0164\13\357\2\0\1\u0165\63\0\1\u0166\51\0"+
    "\1\307\1\326\13\307\1\u0167\13\307\1\0\26\307\26\0"+
    "\1\u0168\72\0\1\u0169\30\0\1\u016a\122\0\1\u016b\27\0"+
    "\1\u016c\32\0\1\357\1\375\13\357\1\u016d\13\357\1\0"+
    "\26\357\3\0\1\u016e\60\0\1\u016f\53\0\1\307\1\326"+
    "\11\307\1\u0170\15\307\1\0\26\307\27\0\1\u0171\65\0"+
    "\1\u0172\22\0\31\u0173\1\0\26\u0173\41\0\1\u0174\20\0"+
    "\1\u0175\55\0\1\357\1\375\1\357\1\u0176\25\357\1\0"+
    "\26\357\4\0\1\u0177\62\0\1\u0178\50\0\1\307\1\326"+
    "\27\307\1\0\1\u0179\25\307\30\0\1\u017a\75\0\1\u017b"+
    "\11\0\1\u0173\1\u017c\27\u0173\1\0\26\u0173\46\0\1\u017d"+
    "\14\0\1\u017e\54\0\1\357\1\375\27\357\1\0\25\357"+
    "\1\u017f\5\0\1\u0180\62\0\1\u0181\47\0\1\307\1\326"+
    "\1\u0182\26\307\1\0\26\307\25\0\1\u0183\54\0\1\u0184"+
    "\35\0\1\u0173\1\u017c\7\u0173\1\u0185\17\u0173\1\0\26\u0173"+
    "\56\0\1\u0186\5\0\1\u0187\53\0\1\357\1\375\27\357"+
    "\1\0\1\u0188\25\357\6\0\1\u0189\110\0\1\u018a\20\0"+
    "\1\307\1\326\10\307\1\u018b\16\307\1\0\26\307\12\0"+
    "\1\u018c\70\0\1\u018d\34\0\1\u0173\1\u017c\2\u0173\1\u018e"+
    "\24\u0173\1\0\26\u0173\25\0\1\u018f\37\0\1\u0190\52\0"+
    "\1\357\1\375\3\357\1\u0191\23\357\1\0\26\357\4\0"+
    "\1\u0192\113\0\1\u0193\17\0\31\u0194\1\0\26\u0194\14\0"+
    "\1\u0195\43\0\1\u0173\1\u017c\5\u0173\1\u0196\21\u0173\1\0"+
    "\26\u0173\12\0\1\u0197\53\0\1\u0198\51\0\1\357\1\375"+
    "\2\357\1\u0199\24\357\1\0\26\357\7\0\1\u019a\111\0"+
    "\1\u019b\16\0\1\u0194\1\u019c\27\u0194\1\0\26\u0194\25\0"+
    "\1\u019d\32\0\1\u0173\1\u017c\6\u0173\1\u019e\20\u0173\1\0"+
    "\26\u0173\31\u019f\1\0\26\u019f\4\0\1\u01a0\53\0\1\357"+
    "\1\375\12\357\1\u01a1\14\357\1\0\26\357\10\0\1\u01a2"+
    "\104\0\1\u01a3\22\0\1\u0194\1\u019c\7\u0194\1\u01a4\17\u0194"+
    "\1\0\26\u0194\12\0\1\115\45\0\1\u0173\1\u017c\14\u0173"+
    "\1\u01a5\12\u0173\1\0\26\u0173\1\u019f\1\u01a6\27\u019f\1\0"+
    "\26\u019f\7\0\1\u01a7\50\0\1\357\1\375\15\357\1\u01a8"+
    "\11\357\1\0\26\357\37\0\1\u01a9\65\0\1\u01aa\12\0"+
    "\1\u0194\1\u019c\2\u0194\1\u01ab\24\u0194\1\0\26\u0194\1\u0173"+
    "\1\u017c\27\u0173\1\0\1\u01ac\25\u0173\1\u019f\1\u01a6\7\u019f"+
    "\1\u01ad\17\u019f\1\0\26\u019f\10\0\1\u01ae\47\0\1\357"+
    "\1\375\10\357\1\u01af\16\357\1\0\26\357\40\0\1\u01b0"+
    "\52\0\1\u01b1\24\0\1\u0194\1\u019c\5\u0194\1\u01b2\21\u0194"+
    "\1\0\26\u0194\1\u0173\1\u017c\15\u0173\1\u01b3\11\u0173\1\0"+
    "\26\u0173\1\u019f\1\u01a6\2\u019f\1\u01b4\24\u019f\1\0\26\u019f"+
    "\37\0\1\u01b5\61\0\1\u01b6\22\0\1\u01b7\53\0\1\u0194"+
    "\1\u019c\6\u0194\1\u01b8\20\u0194\1\0\26\u0194\1\u0173\1\u017c"+
    "\27\u0173\1\0\15\u0173\1\u01b9\10\u0173\1\u019f\1\u01a6\5\u019f"+
    "\1\u01ba\21\u019f\1\0\26\u019f\40\0\1\u01bb\54\0\1\u01bc"+
    "\35\0\1\u01bd\44\0\1\u0194\1\u019c\11\u0194\1\u01be\15\u0194"+
    "\1\0\26\u0194\1\u0173\1\u017c\27\u0173\1\0\2\u0173\1\u01bf"+
    "\23\u0173\1\u019f\1\u01a6\13\u019f\1\u01c0\13\u019f\1\0\26\u019f"+
    "\41\0\1\u01c1\63\0\1\u01c2\26\0\1\u01c3\43\0\1\u0194"+
    "\1\u019c\2\u0194\1\u01c4\24\u0194\1\0\26\u0194\1\u0173\1\u017c"+
    "\13\u0173\1\u01c5\13\u0173\1\0\26\u0173\1\u019f\1\u01a6\6\u019f"+
    "\1\u01c6\20\u019f\1\0\26\u019f\35\0\1\u01c7\31\0\1\u01c8"+
    "\52\0\1\u01c9\55\0\1\u0194\1\u019c\12\u0194\1\u01ca\14\u0194"+
    "\1\0\26\u0194\1\u0173\1\u017c\10\u0173\1\u01cb\16\u0173\1\0"+
    "\26\u0173\1\u019f\1\u01a6\5\u019f\1\u01cc\21\u019f\1\0\26\u019f"+
    "\42\0\1\u01cd\24\0\1\u01ce\57\0\1\u01cf\50\0\1\u0194"+
    "\1\u019c\1\u01d0\26\u0194\1\0\26\u0194\1\u019f\1\u01a6\15\u019f"+
    "\1\u01d1\11\u019f\1\0\26\u019f\4\0\1\u01d2\67\0\1\u01d3"+
    "\57\0\1\u01d4\43\0\1\u0194\1\u019c\13\u0194\1\u01d5\13\u0194"+
    "\1\0\26\u0194\1\u019f\1\u01a6\12\u019f\1\u01d6\14\u019f\1\0"+
    "\26\u019f\35\0\1\u01d7\25\0\1\u01d8\101\0\1\u01d9\32\0"+
    "\1\u0194\1\u019c\11\u0194\1\u01da\15\u0194\1\0\26\u0194\1\u019f"+
    "\1\u01a6\27\u019f\1\0\2\u019f\1\u01db\23\u019f\14\0\1\u01dc"+
    "\46\0\1\u01dd\66\0\1\u01de\45\0\1\u0194\1\u019c\14\u0194"+
    "\1\u01df\12\u0194\1\0\26\u0194\1\u019f\1\u01a6\13\u019f\1\u01e0"+
    "\13\u019f\1\0\26\u019f\36\0\1\u01e1\46\0\1\u01e2\32\0"+
    "\31\u01e3\1\0\26\u01e3\1\u0194\1\u019c\11\u0194\1\u01e4\15\u0194"+
    "\1\0\26\u0194\1\u019f\1\u01a6\12\u019f\1\u01e5\14\u019f\1\0"+
    "\26\u019f\14\0\1\u01e6\55\0\1\u01e7\45\0\1\u01e3\1\u01e8"+
    "\27\u01e3\1\0\26\u01e3\1\u0194\1\u019c\12\u0194\1\u01e9\14\u0194"+
    "\1\0\26\u0194\1\u019f\1\u01a6\2\u019f\1\u01ea\24\u019f\1\0"+
    "\26\u019f\5\0\1\u01eb\52\0\31\u01ec\1\0\26\u01ec\1\u01e3"+
    "\1\u01e8\7\u01e3\1\u01ed\17\u01e3\1\0\26\u01e3\1\u0194\1\u019c"+
    "\15\u0194\1\u01ee\11\u0194\1\0\26\u0194\1\u019f\1\u01a6\10\u019f"+
    "\1\u01ef\16\u019f\1\0\26\u019f\25\0\1\u01f0\32\0\1\u01ec"+
    "\1\u01f1\27\u01ec\1\0\26\u01ec\1\u01e3\1\u01e8\2\u01e3\1\u01f2"+
    "\24\u01e3\1\0\26\u01e3\1\u0194\1\u019c\10\u0194\1\u01f3\16\u0194"+
    "\1\0\26\u0194\12\0\1\u01f4\45\0\1\u01ec\1\u01f1\7\u01ec"+
    "\1\u01f5\17\u01ec\1\0\26\u01ec\1\u01e3\1\u01e8\5\u01e3\1\u01f6"+
    "\21\u01e3\1\0\26\u01e3\31\u01f7\1\0\26\u01f7\1\u01ec\1\u01f1"+
    "\2\u01ec\1\u01f8\24\u01ec\1\0\26\u01ec\1\u01e3\1\u01e8\13\u01e3"+
    "\1\u01f9\13\u01e3\1\0\26\u01e3\1\u01f7\1\u01fa\27\u01f7\1\0"+
    "\26\u01f7\1\u01ec\1\u01f1\5\u01ec\1\u01fb\21\u01ec\1\0\26\u01ec"+
    "\1\u01e3\1\u01e8\6\u01e3\1\u01fc\20\u01e3\1\0\26\u01e3\1\u01f7"+
    "\1\u01fa\7\u01f7\1\u01fd\17\u01f7\1\0\26\u01f7\1\u01ec\1\u01f1"+
    "\13\u01ec\1\u01fe\13\u01ec\1\0\26\u01ec\1\u01e3\1\u01e8\27\u01e3"+
    "\1\0\2\u01e3\1\u01ff\23\u01e3\1\u01f7\1\u01fa\2\u01f7\1\u0200"+
    "\24\u01f7\1\0\26\u01f7\1\u01ec\1\u01f1\6\u01ec\1\u0201\20\u01ec"+
    "\1\0\26\u01ec\1\u01e3\1\u01e8\27\u01e3\1\0\1\u01e3\1\u0202"+
    "\24\u01e3\1\u01f7\1\u01fa\5\u01f7\1\u0203\21\u01f7\1\0\26\u01f7"+
    "\1\u01ec\1\u01f1\27\u01ec\1\0\2\u01ec\1\u0204\23\u01ec\1\u01e3"+
    "\1\u01e8\2\u01e3\1\u0205\24\u01e3\1\0\26\u01e3\1\u01f7\1\u01fa"+
    "\13\u01f7\1\u0206\13\u01f7\1\0\26\u01f7\1\u01ec\1\u01f1\5\u01ec"+
    "\1\u0207\21\u01ec\1\0\26\u01ec\1\u01e3\1\u01e8\11\u01e3\1\u0208"+
    "\15\u01e3\1\0\26\u01e3\1\u01f7\1\u01fa\6\u01f7\1\u0209\20\u01f7"+
    "\1\0\26\u01f7\1\u01ec\1\u01f1\5\u01ec\1\u020a\21\u01ec\1\0"+
    "\26\u01ec\1\u01e3\1\u01e8\12\u01e3\1\u020b\14\u01e3\1\0\26\u01e3"+
    "\1\u01f7\1\u01fa\12\u01f7\1\u020c\14\u01f7\1\0\26\u01f7\1\u01ec"+
    "\1\u01f1\12\u01ec\1\u020d\14\u01ec\1\0\26\u01ec\1\u01e3\1\u01e8"+
    "\1\u020e\26\u01e3\1\0\26\u01e3\1\u01f7\1\u01fa\2\u01f7\1\u020f"+
    "\24\u01f7\1\0\26\u01f7\1\u01ec\1\u01f1\1\u01ec\1\u0210\25\u01ec"+
    "\1\0\26\u01ec\1\u01e3\1\u01e8\5\u01e3\1\u0211\21\u01e3\1\0"+
    "\26\u01e3\1\u01f7\1\u01fa\27\u01f7\1\0\1\u01f7\1\u0212\24\u01f7"+
    "\1\u01ec\1\u01f1\1\u01ec\1\u0213\25\u01ec\1\0\26\u01ec\1\u01e3"+
    "\1\u01e8\12\u01e3\1\u0214\14\u01e3\1\0\26\u01e3\1\u01f7\1\u01fa"+
    "\5\u01f7\1\u0215\21\u01f7\1\0\26\u01f7\1\u01ec\1\u01f1\25\u01ec"+
    "\1\u0216\1\u01ec\1\0\26\u01ec\1\u01e3\1\u01e8\10\u01e3\1\u0217"+
    "\16\u01e3\1\0\26\u01e3\1\u01f7\1\u01fa\27\u01f7\1\0\2\u01f7"+
    "\1\u0218\23\u01f7\1\u01ec\1\u01f1\11\u01ec\1\u0219\15\u01ec\1\0"+
    "\26\u01ec\1\u01f7\1\u01fa\13\u01f7\1\u021a\13\u01f7\1\0\26\u01f7"+
    "\1\u01ec\1\u01f1\27\u01ec\1\0\11\u01ec\1\u021b\14\u01ec\1\u01f7"+
    "\1\u01fa\11\u01f7\1\u021c\15\u01f7\1\0\26\u01f7\1\u01ec\1\u01f1"+
    "\27\u01ec\1\0\12\u01ec\1\u021d\13\u01ec\1\u01f7\1\u01fa\27\u01f7"+
    "\1\0\1\u021e\25\u01f7\1\u01ec\1\u01f1\13\u01ec\1\u021f\13\u01ec"+
    "\1\0\26\u01ec\1\u01f7\1\u01fa\1\u0220\26\u01f7\1\0\26\u01f7"+
    "\1\u01ec\1\u01f1\1\u01ec\1\u0221\25\u01ec\1\0\26\u01ec\1\u01f7"+
    "\1\u01fa\27\u01f7\1\0\3\u01f7\1\u0222\22\u01f7\1\u01ec\1\u01f1"+
    "\10\u01ec\1\u0223\16\u01ec\1\0\26\u01ec\1\u01f7\1\u01fa\12\u01f7"+
    "\1\u0224\14\u01f7\1\0\27\u01f7\1\u01fa\27\u01f7\1\0\4\u01f7"+
    "\1\u0225\22\u01f7\1\u01fa\12\u01f7\1\u0226\14\u01f7\1\0\27\u01f7"+
    "\1\u01fa\3\u01f7\1\u0227\23\u01f7\1\0\27\u01f7\1\u01fa\10\u01f7"+
    "\1\u0228\16\u01f7\1\0\26\u01f7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25776];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\260\0\1\11\54\0\1\11\24\0"+
    "\1\1\31\0\1\1\53\0\1\1\2\0\1\1\23\0"+
    "\1\1\65\0\1\1\43\0\1\1\33\0\1\1\43\0"+
    "\1\1\3\0\1\1\43\0\1\1\13\0\1\1\4\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	private NSDLAgeRange nsdlAge = new NSDLAgeRange() ;

	private List<String> keywords = new ArrayList<String>() ;

	private Set<String> endUsers = new HashSet<String>() ;

	private NSDLlreLRT lrt = new NSDLlreLRT() ;

	private JSONArray contexts = new JSONArray() ;

	private String url ;

	private String title ;

	private String description ;

	private String language ;

	private String rights ;

	private String format ;

	private String creationDate ;

	private String author ;

	private String licensor ;



    private JSONObject akif ;

    

    public void generate()

    {

    	generateLanguageBlock() ;

    	generateTokenBlock() ;

    	generateRights() ;

    	generateContributors() ;

    	generateExpressions() ;

    }

    

    @SuppressWarnings("unchecked")

    private void generateExpressions()

    {

    	JSONArray expressions = (JSONArray) akif.get( "expressions" ) ;

    	JSONObject expression = new JSONObject() ;

    	if ( language != null )

    	{

    		expression.put( "language", language ) ;

    	}

    	StringBuilder manifestationsString = new StringBuilder() ;

    	manifestationsString.append( "[{\"name\": \"experience\", " ) ;

    	if ( format != null )

    	{

    		manifestationsString.append( "\"parameter\": \"" + format + "\"," ) ;

    	}

    	manifestationsString.append( " \"items\": [{ \"url\": \"" + url + "\", \"broken\": false}]}]" ) ;  	

      	expression.put( "manifestations", JSONValue.parse( manifestationsString.toString() ) ) ;

    	expressions.add( expression ) ;

    	akif.put( "expressions", expressions ) ;

    }

    

    @SuppressWarnings("unchecked")

    private void generateContributors()

    {

    	JSONArray contributors = (JSONArray)akif.get( "contributors" ) ;

    	if ( author != null )

    	{

    		JSONObject auth = new JSONObject() ;

    		auth.put( "role", "author" ) ;

    		auth.put( "name", author ) ;

    		if ( creationDate != null )

    		{

    			auth.put( "date", creationDate ) ;

    		}

    		contributors.add( auth ) ;

    	}

    	if ( licensor != null )

    	{

    		JSONObject lic = new JSONObject() ;

    		lic.put( "role", "licensor" ) ;

    		lic.put( "name", licensor ) ;

    		contributors.add( lic ) ;

    	}

    	akif.put("contributors", contributors ) ;

    }

    

    @SuppressWarnings("unchecked")

    private void generateRights()

    {

    	JSONObject r = (JSONObject) akif.get( "rights" ) ;

    	if (rights != null)

    	{

    		JSONObject description = new JSONObject() ;

    		description.put( "en", rights ) ;

    		r.put( "description", description ) ;    		

    	}

    	akif.put( "rights", r ) ;

    }

    

    @SuppressWarnings("unchecked")

    private void generateTokenBlock()

    {

    	JSONObject tokenBlock = (JSONObject) akif.get( "tokenBlock" ) ;

    	if ( !lrt.getLearningResourceTypes().isEmpty() )

    	{

    		JSONArray learningResourceTypes = new JSONArray() ;

			learningResourceTypes.addAll( lrt.getLearningResourceTypes() ) ;

    		tokenBlock.put("learningResourceTypes", learningResourceTypes) ;

    	}

    	if ( !"0-0".equals( nsdlAge.getAgeRange() ) )

    	{

    		tokenBlock.put( "ageRange", nsdlAge.getAgeRange() ) ;

    		

    		//18 and under = compulsory education

			//18 - U = higher education

			String[] age = nsdlAge.getAgeRange().split( "-" ) ;

    		if ("U".equals( age[1] ))

    		{

    			contexts.add( "higher education" ) ;

    		}

    		else

    		{	

    			int max = Integer.parseInt( age[1] ) ;

    			if ( max > 18 )

    			{

    				contexts.add( "higher education" ) ;

    			}

    		}

    		if ("U".equals( age[0] ))

    		{

    			contexts.add( "compulsory education" ) ;

    		}

    		else

    		{

    			int min = Integer.parseInt( age[0] ) ;

    			if ( min < 18 )

    			{

					contexts.add( "compulsory education" ) ;

				}

			}

    		tokenBlock.put( "contexts", contexts ) ;

    		

    	}

    	if ( !endUsers.isEmpty() )

    	{

    		JSONArray endUserRoles = new JSONArray() ;

    		endUserRoles.addAll( endUsers ) ;

    		tokenBlock.put( "endUserRoles", endUserRoles ) ;

    	}

    	akif.put( "tokenBlock", tokenBlock ) ;

    }

	

	@SuppressWarnings("unchecked")

    private void generateLanguageBlock()

    {

    	JSONObject languageBlocks = (JSONObject) akif.get( "languageBlocks" ) ;

    	JSONObject enBlock = new JSONObject() ;

    	if (title != null)

    	{

    		enBlock.put( "title", title ) ;

    	}

    	if (description != null)

    	{

    		enBlock.put( "description", description ) ;

    	}

    	if ( !keywords.isEmpty() )

    	{

    		JSONArray kws = new JSONArray() ;

    		kws.addAll( keywords ) ;

    		enBlock.put( "keywords", kws ) ;

    	}

    	languageBlocks.put( "en", enBlock ) ;

    	akif.put( "languageBlocks", languageBlocks ) ;

    }



    public String toString() 

    {

      return akif.toJSONString() ;

    }

    

	public JSONObject getAkif() {

		return akif;

	}



	@SuppressWarnings("unchecked")

	public void setSet(String set) {

		akif.put("set", set) ;

	}

	

	@SuppressWarnings("unchecked")

	public void setId(int id)

	{

		akif.put("identifier", new Integer( id ) ) ;

	}

	

	public String audience2userRole( String audience )

	{

		if ( "Administrator".equals( audience ) )

		{

			return "manager" ;

		}

		if ( "Educator".equals( audience ) )

		{

			return "teacher" ;

		}

		if ( "Learner".equals( audience ) )

		{

			return "learner" ;

		}

		if ( "Parent/Guardian".equals( audience ) )

		{

			return "parent" ;

		}

		return "other" ;

	}

	

	@SuppressWarnings("unchecked")

	public void init()

	{

		akif = new JSONObject() ;

		akif.put( "status", "published" ) ;

		akif.put( "generateThumbnail", new Boolean( true ) ) ;

		akif.put( "creationDate", utcNow() ) ;

		akif.put( "lastUpdateDate", utcNow() ) ;

		akif.put( "languageBlocks", new JSONObject() ) ;

		akif.put( "tokenBlock", new JSONObject() ) ;

		akif.put( "expressions", new JSONArray() ) ;

		akif.put( "rights", new JSONObject() ) ;

		akif.put( "contributors", new JSONArray() ) ;

	}

	

	private String utcNow() 

	{

		Calendar cal = Calendar.getInstance();

		SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd" );

		return sdf.format(cal.getTime());

	}

	

	private String extract( String element )

	{	

		return element.substring(element.indexOf(">") + 1 , element.indexOf("</") );

	}

	



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NSDL2AKIF(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  NSDL2AKIF(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { creationDate = extract( yytext() ).trim() ;
          }
        case 17: break;
        case 13: 
          { url = extract( yytext() ).trim().replaceAll("&amp;", "&" ) ;
          }
        case 18: break;
        case 1: 
          { //throw new Error("Illegal character <"+ yytext()+">") ;
          }
        case 19: break;
        case 16: 
          { String nsdlEdLevel = extract( yytext() ).trim() ;

		if ( "Vocational/Professional Development Education".equals( nsdlEdLevel ) )

		{

			contexts.add( "professional development" ) ;	

		}

		else if ( "Informal Education".equals( nsdlEdLevel ) )

		{

			contexts.add( "continuing education" ) ;	

		}

		nsdlAge.SetEducationalLevel( nsdlEdLevel ) ;
          }
        case 20: break;
        case 14: 
          { endUsers.add( audience2userRole( extract( yytext() ).trim() ) ) ;
          }
        case 21: break;
        case 9: 
          { description = extract( yytext() ).trim() ;
          }
        case 22: break;
        case 11: 
          { format = extract( yytext() ).trim() ;
          }
        case 23: break;
        case 6: 
          { keywords.add( extract( yytext() ).trim() ) ;
          }
        case 24: break;
        case 8: 
          { try 

		{

			language = Toolbox.getInstance().language2iso( extract( yytext() ).trim() ) ;

		} 

		catch (ToolboxException e) 

		{

			e.printStackTrace();

		}
          }
        case 25: break;
        case 3: 
          { yybegin( YYINITIAL ) ;

		generate() ;
          }
        case 26: break;
        case 5: 
          { title = extract( yytext() ).trim() ;
          }
        case 27: break;
        case 7: 
          { author = extract( yytext() ).trim() ;
          }
        case 28: break;
        case 2: 
          { yybegin( NSDL ) ;
          }
        case 29: break;
        case 15: 
          { rights = extract( yytext() ).trim() ;
          }
        case 30: break;
        case 4: 
          { try

		{

			lrt.submitNSDLResourceType( extract( yytext() ).trim() ) ;

		}

		catch( ToolboxException tbe )

		{

			tbe.printStackTrace() ;

		}
          }
        case 31: break;
        case 10: 
          { licensor = extract( yytext() ).trim() ;
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java NSDL2AKIF <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        NSDL2AKIF scanner = null;
        try {
          scanner = new NSDL2AKIF( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
